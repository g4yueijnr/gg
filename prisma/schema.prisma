// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String
  image       String?
  password    String?
  provider    String
  collections Collection[]
  createdAt   DateTime     @default(now())
}

model Collection {
  id        Int               @id @default(autoincrement())
  name      String
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  photos    CollectionMedia[]
  createdAt DateTime          @default(now())
}

model Photo {
  id              Int               @id
  alt             String
  height          Int
  width           Int
  photographer    String
  photographerUrl String            @map("photographer_url")
  original        String
  large           String
  portrait        String
  landscape       String
  collections     CollectionMedia[]
}

model Video {
  id              Int               @id @default(autoincrement())
  width           Int
  height          Int
  url             String
  image           String
  videographer    String
  videographerUrl String            @map("videographer_url")
  videoFiles      VideoFile[]  
  collections     CollectionMedia[]
}

model VideoFile {
  id       Int    @id
  quality  String
  width    Int
  height   Int
  fileType String @map("file_type")
  link     String
  video    Video  @relation(fields: [videoId], references: [id])
  videoId  Int
}

model CollectionMedia {
  id           Int        @id @default(autoincrement())
  photoId      Int?
  photo        Photo?          @relation(fields: [photoId], references: [id])
  videoId      Int?
  video        Video?          @relation(fields: [videoId], references: [id])
  collectionId Int
  collection   Collection     @relation(fields: [collectionId], references: [id])
  @@unique([photoId, collectionId])
  @@unique([videoId, collectionId])
}